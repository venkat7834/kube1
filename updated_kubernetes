installation of k8s on AWS using Kops"
1. we need a domain name which can be created from freenom.com
2. we need to create a Route 53 zone with the same domain name we created at step 1
3. configure freenom domain to use the route 53 name servers
4. Deploy a Ec2 linux server on AWS and download tools KOPS & KUBECTL 
5. we need to create a s3 bucket. the k8s config will be saved in this s3 bucket
6. create a AWS Access Key and Secret key and user must have admin (R/W) to the s3 bucket
7. create ssh keypair by running ssh-keygen

8. Create a new IAM user or use an existing IAM user and grant following permissions:
AmazonEC2FullAccess
AmazonRoute53FullAccess
AmazonS3FullAccess
AmazonVPCFullAccess

9. create an Ec2 instance and run these commands from it

10. Configure the AWS CLI by providing the Access Key, Secret Access Key and the AWS region that you want the Kubernetes cluster to be installed:
aws configure

sudo yum install python3 python3-pip
sudo pip3 install awscli
awscli configure or try

AWS Access Key ID [None]: AccessKeyValue
AWS Secret Access Key [None]: SecretAccessKeyValue
Default region name [None]: us-east-1
Default output format [None]:

11. Create an AWS S3 bucket for kops to persist its state:
bucket_name=imesh-kops-state-store
aws s3api create-bucket --bucket kapple786 --region us-east-1

12. Enable versioning for the above S3 bucket:
aws s3api put-bucket-versioning --bucket kapple786 --versioning-configuration Status=Enabled


for centos or rhel
cat <<EOF > /etc/yum.repos.d/kubernetes.repo
[kubernetes]
name=Kubernetes
baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64
enabled=1
gpgcheck=1
repo_gpgcheck=1
gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
EOF
yum install -y kubectl


for any:
curl -LO https://storage.googleapis.com/kubernetes-release/release/`curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt`/bin/linux/amd64/kubectl

where to get?
https://kubernetes.io/docs/tasks/tools/install-kubectl/
search for latest key word to find the link

# Linux
curl -LO https://github.com/kubernetes/kops/releases/download/$(curl -s https://api.github.com/repos/kubernetes/kops/releases/latest | grep tag_name | cut -d '"' -f 4)/kops-linux-amd64
chmod +x kops-linux-amd64
sudo mv kops-linux-amd64 /usr/local/bin/kops
# kops version: 1.9.0

13. Create a Kubernetes cluster definition using kops by providing the required node count, node size, and AWS zones. The node size or rather the EC2 instance type would need to be decided according to the workload that you are planning to run on the Kubernetes cluster:

ssh-keygen (to create ssh keys to log into the cluster)

 kops create cluster --name=demo.awscloud.ga --state=s3://kapple78 --node-count=2 --node-size=t2.medium --zones=us-east-1a --dns-zone=awscloud.ga --cloud=aws

kopd edit cluster --name=demo.kapple.tk --state=s3://kapple78     to edit the cluster

kops validate cluster --name=demo.kapple.tk --state=s3://kapple78 --yes


 kops delete  cluster --name=demo.awscloud.ga --state=s3://kapple786 --yes


if needed execute the kops create cluster help command to find additional parameters:
kops create cluster --help

Once the above process completes, kops will configure the Kubernetes CLI (kubectl) with Kubernetes cluster API endpoint and user credentials.
13. Now, you may need to deploy the Kubernetes dashboard to access the cluster via its web based user interface:
kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/master/src/deploy/recommended/kubernetes-dashboard.yaml
14. Execute the below command to find the admin user’s password:
kops get secrets kube --type secret -oplaintext
15. Execute the below command to find the Kubernetes master hostname:
kubectl cluster-info
Kubernetes master is running at https://api-imesh-k8s-local-<dynamic-id>.us-east-1.elb.amazonaws.com
KubeDNS is running at https://api-imesh-k8s-local-<dynamic-id>.us-east-1.elb.amazonaws.com/api/v1/namespaces/kube-system/services/kube-dns:dns/proxy
16. Access the Kubernetes dashboard using the following URL:
https://<kubernetes-master-hostname>/ui
Provide the username as admin and the password obtained above at the step 14 on the browser’s login page:

Execute the below command to find the admin service account token. Note the secret name used here is different from the previous one:
kops get secrets admin --type secret -oplaintext
Provide the above service account token on the service token request page:



extra:
Hi,
the link to kube dashboard yaml file doesn’t seem to work. https://raw.githubusercontent.com/kubernetes/dashboard/master/src/deploy/recommended/kubernetes-dashboard.yaml

Should be changed to https://raw.githubusercontent.com/kubernetes/dashboard/v1.10.1/src/deploy/recommended/kubernetes-dashboard.yaml



